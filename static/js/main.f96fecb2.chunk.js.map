{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["LINKEDIN_URL","base","params","query","Object","entries","map","key","value","encodeURIComponent","join","getURLWithQueryParams","response_type","client_id","redirect_uri","state","scope","console","log","App","className","href","type","style","height","width","src","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0NAeOA,G,WARwB,SAACC,EAAMC,GAClC,IAAMC,EAAQC,OAAOC,QAAQH,GACxBI,KAAI,mCAAEC,EAAF,KAAOC,EAAP,qBAAqBD,EAArB,YAA4BE,mBAAmBD,OACnDE,KAAK,KAEV,MAAM,GAAN,OAAUT,EAAV,YAAkBE,GAGAQ,CAClB,kDACA,CACIC,cAAe,OACfC,UAAW,iBACXC,aAAc,6CACdC,MAAO,WAEPC,MAAO,kCAGfC,QAAQC,IAAI,WAkKGC,MAnDf,WACI,OACI,qBAAKC,UAAU,MAAf,SACI,yBAAQA,UAAU,aAAlB,UACI,sCACS,8CADT,0BAqBA,uBAGA,uBACA,mBAAGC,KAAMrB,EAAT,SACI,qBAAKsB,KAAK,SAASC,MAAO,CAAEC,OAAQ,OAAQC,MAAO,SAAnD,SACI,qBACIF,MAAO,CAAEC,OAAQ,OAAQC,MAAO,QAChCC,IACI,+EAEJC,IAAK,wCCjKlBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f96fecb2.chunk.js","sourcesContent":["import './App.css';\n// import {GoogleLogin} from \"react-google-login\";\nimport axios from \"axios\";\n// import {LinkedInLoginButton} from \"react-social-login-buttons\";\n// import LinkedIn from \"react-linkedin-login/src\";\n// import SocialButton from './SocialButton'\n\n const getURLWithQueryParams = (base, params) => {\n    const query = Object.entries(params)\n        .map(([key, value]) => `${key}=${encodeURIComponent(value)}`)\n        .join(\"&\");\n\n    return `${base}?${query}`;\n};\n\n const LINKEDIN_URL = getURLWithQueryParams(\n    \"https://www.linkedin.com/oauth/v2/authorization\",\n    {\n        response_type: \"code\",\n        client_id: \"78tf1ujvkzq8ks\",\n        redirect_uri: \"https://endorphin82.github.io/google_login\",\n        state: \"state123\",\n        // scope: \"r_basicprofile r_emailaddress\",\n        scope: \"r_liteprofile r_emailaddress\"\n    }\n);\nconsole.log(\"v2.2.71\")\nconst linkedinError = (err) => {\n    console.log(\"err\", err);\n}\nconst linkedinResponse = (res) => {\n    const headers = {\n        \"Access-Control-Allow-Origin\": \"*\"\n    };\n    console.log(\"res\", res);\n    const redirect_uri = \"https%3A%2F%2Fendorphin82.github.io%2Fgoogle_login\"\n    // const redirect_uri = \"https://endorphin82.github.io/google_login\"\n    const client_id = \"78tf1ujvkzq8ks\"\n    const response_type = \"code\"\n\n    // redirect_uri=https%3A%2F%2Fdev.example.com%2Fauth%2Flinkedin%2Fcallback\n    const url = `https://www.linkedin.com/oauth/v2/authorization?response_type=${response_type}&client_id=${client_id}&redirect_uri=${redirect_uri}&scope=r_liteprofile%20r_emailaddress%20w_member_social`\n    // const url = \"https://www.linkedin.com/oauth/v2/authorization\"\n    // axios.post('https://endorphin.fun/auth/google/callback', null,\n    //     {\n    //         params: {\n    //             serviceId: res.accessToken,\n    //             service: res.tokenObj.id_token\n    //         }\n    //     }\n    // )\n\n    // axios.post('https://con29.tk:8080/rest-auth/linkedin',\n    //     {\n    //         access_token: res.accessToken\n    //     }\n    // ).then(r => {\n    //     console.log(\"then\", r);\n    // })\n\n    axios.get(url, {headers}, {\n        // params: {\n        //     response_type,\n        //     client_id,\n        //     redirect_uri\n        // }\n    }).then(r => console.log(r)).catch(err => linkedinError(err))\n\n\n    /*\n                axios.post('https://endorphin.fun/auth/google/callback',\n                    {\n                        access_token: res.accesstoken,\n                    }\n        )\n        console.log(res);\n        return await res.status;\n    */\n\n    //     .then(r => {\n    //     console.log(r);\n    // }).catch(e => {\n    //     linkedinError(e)\n    // })\n}\n\nconst googleResponse = (response) => {\n\n    console.log(\"response\", response);\n    // fetch('https://endorphin.fun/auth/google/callback', options).then(r => {\n    // // fetch('https://endorphin.fun/google/redirect', options).then(r => {\n    //     const token = r.headers.get('x-auth-token');\n    //     r.json().then(user => {\n    //         if (token) {\n    //             this.setState({isAuthenticated: true, user, token})\n    //         }\n    //     });\n    // })\n\n    // axios(options)\n    //     .then(r => {\n    //         // .get('https://endorphin.fun/google/redirect', options).then(r => {\n    //         const token = r.headers.get('x-auth-token');\n    //         r.json().then(user => {\n    //             if (token) {\n    //                 this.setState({isAuthenticated: true, user, token})\n    //             }\n    //         });\n    //     })\n    // const params = new url.URLSearchParams({\n    //     serviceId: response.accessToken,\n    //     service: response.tokenObj.id_token\n    // });\n    // querystring.stringify({\n    //     serviceId: response.accessToken,\n    //     service: response.tokenObj.id_token\n    // })\n\n    /*    axios.post('https://endorphin.fun/auth/google/callback', null,\n            {\n                params: {\n                    serviceId: response.accessToken,\n                    service: response.tokenObj.id_token\n                }\n            }\n        )*/\n\n    axios.post('https://con29.tk:8080/rest-auth/google',\n        {\n            access_token: response.accessToken\n        }\n    ).then(r => {\n        console.log(\"then\", r);\n    })\n\n};\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <p>\n                    Edit <code>src/App.js</code> and save to reload.\n                </p>\n                {/*{       <SocialButton*/}\n                {/*    provider='google'*/}\n                {/*    appId='319511837370-6h11919mja93u8rijnlbu3h5j8kt9k5l'*/}\n                {/*    onLoginSuccess={googleResponse}*/}\n                {/*    triggerLogin={googleResponse}*/}\n                {/*    onLoginFailure={linkedinError}*/}\n                {/*>*/}\n                {/*    Login with Google*/}\n                {/*</SocialButton>}*/}\n                {/*<GoogleLogin*/}\n                {/*    clientId=\"319511837370-6h11919mja93u8rijnlbu3h5j8kt9k5l.apps.googleusercontent.com\"*/}\n                {/*    buttonText=\"Login\"*/}\n                {/*    isSignedIn={true}*/}\n                {/*    onSuccess={googleResponse}*/}\n                {/*    // uxMode=\"popup\"*/}\n                {/*    // redirectUri=\"https://endorphin.fun/google/redirect\"*/}\n                {/*/>*/}\n\n                <br/>\n                {/*<LinkedInLoginButton onClick={linkedinResponse}/>\n                               */}\n                <br/>\n                <a href={LINKEDIN_URL}>\n                    <div type=\"submit\" style={{ height: \"40px\", width: \"215px\" }}>\n                        <img\n                            style={{ height: \"100%\", width: \"100%\" }}\n                            src={\n                                \"https://taggbox.com/blog/wp-content/uploads/2018/09/Signin-with-LinkedIn.png\"\n                            }\n                            alt={\"LinkedIn authentification\"}\n                        />\n                    </div>\n                </a>\n                {/* <LinkedIn\n                    clientId='78tf1ujvkzq8ks'\n                    callback={linkedinResponse}\n                    text='LinkedIn'/>*/}\n\n\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}